#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es ANPR
Cr√©√© les tables et ins√®re les donn√©es initiales
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path Python
sys.path.append(str(Path(__file__).parent))

from database import engine, SessionLocal
from models import Base, User, Camera, Vehicle
from models.user import UserRole
from passlib.context import CryptContext

# Configuration du hachage des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_tables():
    """Cr√©√© toutes les tables de la base de donn√©es"""
    print("üîß Cr√©ation des tables...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables cr√©√©es avec succ√®s!")

def create_admin_user():
    """Cr√©√© un utilisateur administrateur par d√©faut"""
    print("üë§ Cr√©ation de l'utilisateur administrateur...")
    
    db = SessionLocal()
    try:
        # V√©rifier si l'admin existe d√©j√†
        admin = db.query(User).filter(User.email == "admin@anpr.bj").first()
        if admin:
            print("‚ö†Ô∏è  L'utilisateur administrateur existe d√©j√†")
            return
        
        # Cr√©er l'utilisateur admin
        admin_user = User(
            email="admin@anpr.bj",
            hashed_password=pwd_context.hash("admin123"),
            first_name="Administrateur",
            last_name="Syst√®me",
            role=UserRole.ADMIN,
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        print("‚úÖ Utilisateur administrateur cr√©√©!")
        print("   Email: admin@anpr.bj")
        print("   Mot de passe: admin123")
        print("   ‚ö†Ô∏è  Changez ce mot de passe en production!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}")
        db.rollback()
    finally:
        db.close()

def create_sample_cameras():
    """Cr√©√© quelques cam√©ras d'exemple"""
    print("üìπ Cr√©ation des cam√©ras d'exemple...")
    
    sample_cameras = [
        {
            "name": "Cam√©ra Porte d'Entr√©e",
            "location_name": "Porte principale",
            "latitude": 6.5244,
            "longitude": 2.6042,
            "address": "Cotonou, B√©nin",
            "camera_type": "fixed",
            "status": "online",
            "stream_url": "rtsp://camera1.local:554/stream1"
        },
        {
            "name": "Cam√©ra Parking",
            "location_name": "Zone de parking",
            "latitude": 6.5245,
            "longitude": 2.6043,
            "address": "Cotonou, B√©nin",
            "camera_type": "fixed",
            "status": "online",
            "stream_url": "rtsp://camera2.local:554/stream1"
        },
        {
            "name": "Cam√©ra Mobile 1",
            "location_name": "Patrouille mobile",
            "latitude": 6.5246,
            "longitude": 2.6044,
            "address": "Cotonou, B√©nin",
            "camera_type": "mobile",
            "status": "online",
            "stream_url": "rtsp://mobile1.local:554/stream1"
        }
    ]
    
    db = SessionLocal()
    try:
        for camera_data in sample_cameras:
            # V√©rifier si la cam√©ra existe d√©j√†
            existing = db.query(Camera).filter(Camera.name == camera_data["name"]).first()
            if existing:
                continue
                
            camera = Camera(**camera_data)
            db.add(camera)
        
        db.commit()
        print(f"‚úÖ {len(sample_cameras)} cam√©ras d'exemple cr√©√©es!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des cam√©ras: {e}")
        db.rollback()
    finally:
        db.close()

def create_sample_vehicles():
    """Cr√©√© quelques v√©hicules d'exemple"""
    print("üöó Cr√©ation des v√©hicules d'exemple...")
    
    sample_vehicles = [
        {
            "plate_number": "AB-123-CD",
            "brand": "Toyota",
            "model": "Corolla",
            "color": "Blanc",
            "vehicle_type": "car",
            "year": 2020
        },
        {
            "plate_number": "XY-789-ZW",
            "brand": "Honda",
            "model": "Civic",
            "color": "Noir",
            "vehicle_type": "car",
            "year": 2019
        },
        {
            "plate_number": "ST-456-UV",
            "brand": "Yamaha",
            "model": "YBR 125",
            "color": "Rouge",
            "vehicle_type": "motorcycle",
            "year": 2021
        }
    ]
    
    db = SessionLocal()
    try:
        for vehicle_data in sample_vehicles:
            # V√©rifier si le v√©hicule existe d√©j√†
            existing = db.query(Vehicle).filter(Vehicle.plate_number == vehicle_data["plate_number"]).first()
            if existing:
                continue
                
            vehicle = Vehicle(**vehicle_data)
            db.add(vehicle)
        
        db.commit()
        print(f"‚úÖ {len(sample_vehicles)} v√©hicules d'exemple cr√©√©s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des v√©hicules: {e}")
        db.rollback()
    finally:
        db.close()

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation de la base de donn√©es ANPR")
    print("=" * 50)
    
    try:
        # Cr√©er les tables
        create_tables()
        
        # Cr√©er les donn√©es initiales
        create_admin_user()
        create_sample_cameras()
        create_sample_vehicles()
        
        print("\nüéâ Initialisation termin√©e avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurez votre fichier .env avec les bonnes valeurs")
        print("2. Lancez l'API: python api.py")
        print("3. Acc√©dez √† l'interface: http://localhost:3000")
        print("4. Connectez-vous avec admin@anpr.bj / admin123")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'initialisation: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 